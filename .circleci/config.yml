version: 2.1

executors:
  docker-executor:
    docker:
      - image: mrbotcr/climmob_base:20240105
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASS
      - image: mysql:8.0.23
        command: "--default-authentication-plugin=mysql_native_password"
        environment:
          MYSQL_ROOT_PASSWORD=circleci
    working_directory: ~/work

jobs:
  build_master:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Install curl
          command: apt-get update && apt-get install -y curl
      - run:
          name: Update server
          command: |
            apt-get update && apt-get -y upgrade

      - run:
          name: Run tests
          command: |
            source climmob_env/bin/activate
            export CLIMMOB_PYTEST_RUNNING=true
            pytest -s --cov=climmob --cov-report=xml

      - run:
          name: Verify Coverage File
          command: |
            if [ ! -f coverage.xml ]; then
              echo "Coverage file not found!"
              exit 1
            fi

      - run:
          name: Upload coverage to Codecov
          command: |
            curl -s https://codecov.io/bash | bash -s -- -t $CODECOV_TOKEN -n py3ClimMob -B $(git rev-parse --abbrev-ref HEAD)

      - run:
          name: Install SSH client
          command: |
            apt-get update && apt-get install -y openssh-client

      - run:
          name: Deploy over SSH
          command: |
            ssh -o StrictHostKeyChecking=no -v $PROD_USER@$PROD_IP "./deploy.sh -o $PREV_IMAGE_VERSION -n $IMAGE_VERSION "

      # SUCCESS CODE HERE

  build_develop:
    executor: docker-executor
    steps:
      - checkout

      - run:
          name: Install curl
          command: apt-get update && apt-get install -y curl

      - setup_remote_docker

      - restore_cache:
          key: requirements-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "requirements.txt" }}

      - run:
          name: Update server
          command: |
            apt-get update && apt-get -y upgrade

      - run:
          name: Run servers
          command: |
            /etc/init.d/redis-server start
            tail -f /dev/null
          background: true

      - run:
          # Install dependencies with --user to enable easier caching
          name: Install dependencies
          command: |
            python3 -m venv climmob_env
            source climmob_env/bin/activate
            pip install -r requirements.txt
            pip install setuptools
            mysql -h 127.0.0.1 -u root --ssl-mode=DISABLED --password=circleci --execute='CREATE SCHEMA IF NOT EXISTS climmobv4'
            mysql -h 127.0.0.1 -u root --ssl-mode=DISABLED --password=circleci climmobv4 < ./docker_files/climmob/docker_files/base_db.sql
            python3 create_config.py --daemon --capture_output --mysql_host 127.0.0.1 --mysql_user_name root --mysql_user_password circleci --repository_path /opt/climmob_repository --odktools_path /opt/odktools --climmob_host localhost --climmob_port 5900 --forwarded_allow_ip localhost --pid_file /opt/climmob_gunicorn/climmob.pid --error_log_file /opt/climmob_log/error_log development.ini
            python3 configure_celery.py ./development.ini
            python3 download_nltk_packages.py
            python3 setup.py install
            python3 setup.py compile_catalog
            disable_ssl ./development.ini
            configure_alembic ./development.ini .
            configure_mysql ./development.ini .
            configure_tests ./development.ini .
            alembic upgrade head

      - run:
          name: Test code is well formatted
          command: |
            source climmob_env/bin/activate
            black --version
            black climmob --check || exit;

      - run:
          name: Run Celery in the background
          command: |
            source climmob_env/bin/activate
            export COLUMNS=80
            export CLIMMOB_PYTEST_RUNNING=true
            celery -A climmob.config.celery_app worker --loglevel=info -Q ClimMob
          background: true

      - run:
          name: Run tests
          command: |
            source climmob_env/bin/activate
            export CLIMMOB_PYTEST_RUNNING=true
            pytest -s --cov=climmob --cov-report=xml

      - run:
          name: Verify Coverage File
          command: |
            if [ ! -f coverage.xml ]; then
              echo "Coverage file not found!"
              exit 1
            fi

      - run:
          name: Upload coverage to Codecov
          command: |
            curl -s https://codecov.io/bash | bash -s -- -t $CODECOV_TOKEN -n py3ClimMob -B $(git rev-parse --abbrev-ref HEAD)

      - run:
          name: Install and Build Docker
          command: |
            apt-get install gnupg2 -y
            apt-get install apt-transport-https -y
            apt-get install ca-certificates -y
            apt-get install curl -y
            apt-get install gnupg-agent -y
            apt-get install software-properties-common -y
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - 
            add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" -y
            apt-get update
            apt-get install -y docker-ce docker-ce-cli containerd.io
            docker --version
            pwd
            ls -al
            cd docker_files/climmob
            pwd
            ls -al
            docker build --build-arg GITHUB_USER=$GITHUB_USER --build-arg GITHUB_PASS=$GITHUB_PASS --build-arg GITHUB_OWNER=$GITHUB_OWNER --no-cache --rm -t mrbotcr/climmob:$IMAGE_VERSION -f ./stable.Dockerfile .
            echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USER --password-stdin
            echo '{"credsStore": "secretservice"}' > /etc/docker/config.json
            docker tag mrbotcr/climmob:$IMAGE_VERSION mrbotcr/climmob:latest
            echo 'Tag creado'
            docker push mrbotcr/climmob --all-tags

      - run:
          name: Install SSH client
          command: |
            apt-get update && apt-get install -y openssh-client

      - run:
          name: Deploy over SSH
          command: |
            ssh -o StrictHostKeyChecking=no -v $TEST_USER@$TEST_IP "./testing/deploy_testing.sh -o $PREV_IMAGE_VERSION -n $IMAGE_VERSION "

workflows:
  version: 2
  build:
    jobs:
      - build_master:
          filters:
            branches:
              only:
                - master

      - build_develop:
          filters:
            branches:
              only:
                - develop
